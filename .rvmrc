#!/usr/bin/env bash

# This is an RVM Project .rvmrc file, used to automatically load the ruby
# development environment upon cd'ing into the directory

ruby_name="ruby-1.9.2-p290"
gemset_name=${PWD##*/}

function ensure_bundling {
  # Ensure that Bundler is installed.
  if ! command -v bundle ; then
    gem install bundler
  fi

  # Bundle while reducing excess noise.
  bundle | grep -v 'Using' | grep -v 'complete' | sed '/^$/d'
}

if rvm list strings | grep -q "${ruby_name}" ; then

  # First we attempt to load the desired environment directly from the environment
  # file. This is very fast and efficient compared to running through the entire
  # CLI and selector. If you want feedback on which environment was used then
  # insert the word 'use' after --create as this triggers verbose mode.
  if [[ -d "${rvm_path:-$HOME/.rvm}/environments" \
    && -s "${rvm_path:-$HOME/.rvm}/environments/${ruby_name}@${gemset_name}" ]]
  then
    \. "${rvm_path:-$HOME/.rvm}/environments/${ruby_name}@${gemset_name}"

    if [[ -s "${rvm_path:-$HOME/.rvm}/hooks/after_use" ]]
    then
      . "${rvm_path:-$HOME/.rvm}/hooks/after_use"
    fi
  else
    # If the environment file has not yet been created, use the RVM CLI to select.
    if ! rvm --create use "${ruby_name}@${gemset_name}"; then
      echo "Failed to create RVM environment '${ruby_name}@${gemset_name}'."
      exit 1
    fi
  fi

  # In a separate process
  ensure_bundling &

else
  # Notify the user to install the desired interpreter before proceeding.
  echo "${ruby_name} was not found, please run 'rvm install ${ruby_name}' and then cd back into the project directory."
fi
